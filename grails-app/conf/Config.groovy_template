import javax.naming.Context
import javax.naming.directory.InitialDirContext

import org.codehaus.groovy.grails.plugins.springsecurity.SecurityRequestHolder  as SRH;

import de.fhdortmund.UsrHlpDsk.checkUser.Directory
import de.fhdortmund.UsrHlpDsk.checkUser.DirectoryController

// locations to search for config files that get merged into the main config
// config files can either be Java properties files or ConfigSlurper scripts

// grails.config.locations = [ "classpath:${appName}-config.properties",
//                             "classpath:${appName}-config.groovy",
//                             "file:${userHome}/.grails/${appName}-config.properties",
//                             "file:${userHome}/.grails/${appName}-config.groovy"]

// if (System.properties["${appName}.config.location"]) {
//    grails.config.locations << "file:" + System.properties["${appName}.config.location"]
// }


grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination
grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format
grails.mime.use.accept.header = false
grails.mime.types = [ html: [
		'text/html',
		'application/xhtml+xml'
	],
	xml: [
		'text/xml',
		'application/xml'
	],
	text: 'text/plain',
	js: 'text/javascript',
	rss: 'application/rss+xml',
	atom: 'application/atom+xml',
	css: 'text/css',
	csv: 'text/csv',
	all: '*/*',
	json: [
		'application/json',
		'text/json'
	],
	form: 'application/x-www-form-urlencoded',
	multipartForm: 'multipart/form-data'
]

// URL Mapping Cache Max Size, defaults to 5000
//grails.urlmapping.cache.maxsize = 1000

// What URL patterns should be processed by the resources plugin
grails.resources.adhoc.patterns = [
	'/images/*',
	'/css/*',
	'/js/*',
	'/plugins/*'
]


// The default codec used to encode data with ${}
grails.views.default.codec = "none" // none, html, base64
grails.views.gsp.encoding = "UTF-8"
grails.converters.encoding = "UTF-8"
// enable Sitemesh preprocessing of GSP pages
grails.views.gsp.sitemesh.preprocess = true
// scaffolding templates configuration
grails.scaffolding.templates.domainSuffix = 'Instance'

// Set to false to use the new Grails 1.2 JSONBuilder in the render method
grails.json.legacy.builder = false
// enabled native2ascii conversion of i18n properties files
grails.enable.native2ascii = true
// packages to include in Spring bean scanning
grails.spring.bean.packages = []
// whether to disable processing of multi part requests
grails.web.disable.multipart=false

// request parameters to mask when logging exceptions
grails.exceptionresolver.params.exclude = ['password']

// enable query caching by default
grails.hibernate.cache.queries = true

// set per-environment serverURL stem for creating absolute links
environments {
	development {
		grails.logging.jul.usebridge = true
	}
	production {
		grails.logging.jul.usebridge = false
		// TODO: grails.serverURL = "http://www.changeme.com"
	}
}

// log4j configuration
log4j = {
	// Example of changing the log pattern for the default console
	// appender:
	//
	//appenders {
	//    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')
	//}
	//	debug 'org.codehaus.groovy.grails.plugins.springsecurity',
	//	'grails.plugins.springsecurity',
	//	'org.springframework.security'

	error  'org.codehaus.groovy.grails.web.servlet',  //  controllers
			'org.codehaus.groovy.grails.web.pages', //  GSP
			'org.codehaus.groovy.grails.web.sitemesh', //  layouts
			'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping
			'org.codehaus.groovy.grails.web.mapping', // URL mapping
			'org.codehaus.groovy.grails.commons', // core / classloading
			'org.codehaus.groovy.grails.plugins', // plugins
			'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration
			'org.springframework',
			'org.hibernate',
			'net.sf.ehcache.hibernate'
}


// Added by the Spring Security Core plugin:
grails.plugins.springsecurity.useSecurityEventListener = true
grails.plugins.springsecurity.onInteractiveAuthenticationSuccessEvent = { e, appCtx ->
	// handle InteractiveAuthenticationSuccessEvent
}

grails.plugins.springsecurity.onAbstractAuthenticationFailureEvent = { e, appCtx ->
	// handle AbstractAuthenticationFailureEvent
}

grails.plugins.springsecurity.onAuthenticationSuccessEvent = { e, appCtx ->
	// handle AuthenticationSuccessEvent
	def springSecurityService
	def auth = e.getAuthentication()

	def username = auth.getName()
	def passwd = auth.getCredentials()
	
	def Map sessionVaules = SRH.request.getSession().getAttribute(DirectoryController.SESSION_VARIABLE_NAME)

	if(sessionVaules == null){
		sessionVaules = [:]
	}
	Directory.findAll().each { dir ->
		def tmp = sessionVaules.getAt(dir.name)
		if (tmp == null) {
			def Hashtable<String, String> env = new Hashtable()
			env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory")
			env.put(Context.SECURITY_PROTOCOL,"ssl")

			env.put(Context.SECURITY_AUTHENTICATION, "simple");
			env.put("java.naming.ldap.factory.socket", "de.fhdortmund.ldap.directory.MySSLSocketFactory");

			// You'll want to put your server's name or IP here:
			env.put(Context.PROVIDER_URL, dir.url + ":" + dir.port)

			def userdn = "CN=" + username + "," + dir.baseDN
			// Here, you'll want to set up your company's parameters for OU and DC...
			env.put(Context.SECURITY_PRINCIPAL, userdn)
			env.put(Context.SECURITY_CREDENTIALS,passwd)

			sessionVaules.putAt(dir.name, new InitialDirContext(env))
		}

	}
	SRH.request.getSession().setAttribute(DirectoryController.SESSION_VARIABLE_NAME, sessionVaules)
}

grails.plugins.springsecurity.onAuthenticationSwitchUserEvent = { e, appCtx ->
	// handle AuthenticationSwitchUserEvent
}

grails.plugins.springsecurity.onAuthorizationEvent = { e, appCtx ->
	// handle AuthorizationEvent
}
grails.plugins.springsecurity.securityConfigType = "InterceptUrlMap"
grails.plugins.springsecurity.interceptUrlMap = [
			'/*':               ['IS_AUTHENTICATED_FULLY'],
			'/admin/*': [
				'ROLE_DVZ',
				'IS_AUTHENTICATED_FULLY'
			],
			'/console/*': [
				'ROLE_DVZ',
				'IS_AUTHENTICATED_FULLY'
			],
			'/check/*': [
				'ROLE_DVZ',
				'IS_AUTHENTICATED_FULLY'
			],
			'/directory/*': [
				'ROLE_DVZ',
				'IS_AUTHENTICATED_FULLY'
			],
			'/home/**': [
				'ROLE_DVZ',
				'IS_AUTHENTICATED_FULLY'
			],
			'/query/**': [
				'ROLE_DVZ',
				'IS_AUTHENTICATED_FULLY'
			],
			'/review/runAllChecks': [
				'ROLE_DVZ',
				'ROLE_HLPDSK',
				'IS_AUTHENTICATED_FULLY'
			],
			'/review/*': [
				'ROLE_DVZ',
				'IS_AUTHENTICATED_FULLY']
		]
grails.plugins.springsecurity.userLookup.userDomainClassName = 'de.fhdortmund.UsrHlpDsk.core.DSUser'
grails.plugins.springsecurity.userLookup.authorityJoinClassName = 'de.fhdortmund.UsrHlpDsk.core.DSUserDSRole'
grails.plugins.springsecurity.authority.className = 'de.fhdortmund.UsrHlpDsk.core.DSRole'

grails.plugins.springsecurity.providerNames = [
	'ldapAuthProvider',
	'anonymousAuthenticationProvider'] // specify this when you want to skip attempting to load from db and only use LDAP
grails.plugins.springsecurity.ldap.context.server = 'ldaps://<your ldap server here-/o=<Root>'
grails.plugins.springsecurity.ldap.context.managerDn = 'adminUserDN'
grails.plugins.springsecurity.ldap.context.managerPassword = ''
grails.plugins.springsecurity.ldap.search.base = '<personContainerDN>'
grails.plugins.springsecurity.ldap.search.filter = 'cn={0}'
grails.plugins.springsecurity.ldap.search.searchSubtree = true
grails.plugins.springsecurity.ldap.auth.hideUserNotFoundExceptions = false
grails.plugins.springsecurity.ldap.search.attributesToReturn = [
	'mail'] // extra attributes you want returned; see below for custom classes that access this data
// role-specific LDAP config
grails.plugins.springsecurity.ldap.useRememberMe = false
grails.plugins.springsecurity.ldap.authorities.retrieveGroupRoles = true
grails.plugins.springsecurity.ldap.authorities.groupRoleAttribute= 'cn'
grails.plugins.springsecurity.ldap.authorities.groupSearchBase ='<groupContainerDN>'
grails.plugins.springsecurity.ldap.authorities.groupSearchFilter = 'member={0}' // Active Directory specific - the example settings will work fine for a plain LDAP server

props = new HashMap<String, String>()
props.putAt('SECURITY_PROTOCOL','ssl')
props.putAt('SECURITY_AUTHENTICATION', 'simple')
props.putAt('java.naming.ldap.factory.socket', 'de.fhdortmund.ldap.directory.MySSLSocketFactory')

grails.plugins.springsecurity.ldap.context.baseEnvironmentProperties = props
